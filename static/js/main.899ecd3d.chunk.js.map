{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","SetTimer","type","value","handleClick","id","onClick","Timer","mode","time","Controls","active","handleReset","App","props","setState","breakValue","sessionValue","handleSetTimers","inc","state","className","this","moment","format","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAIMA,EAAS,kBAAM,+CAEfC,EAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,YAAf,OACf,6BACA,wBAAIC,GAAE,UAAKH,EAAL,WAAmC,YAAd,UAAGA,GAAwB,WAAa,SAAnE,UACF,yBAAKG,GAAG,sBACR,4BAAQA,GAAE,UAAKH,EAAL,cAAuBI,QAAS,kBAAMF,GAAY,EAAD,UAAWF,EAAX,YAA3D,UADA,OAEA,yBAAKG,GAAE,UAAKH,EAAL,YAAqBC,GAF5B,OAGA,4BAAQE,GAAE,UAAKH,EAAL,cAAuBI,QAAS,kBAAMF,GAAY,EAAD,UAAUF,EAAV,YAA3D,aAIMK,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACd,6BACA,wBAAIJ,GAAG,eAAwB,YAATG,EAAqB,UAAY,SACvD,uBAAGH,GAAG,aAAaI,KAIbC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAX,OACjB,yBAAKP,GAAG,YACR,4BAAQA,GAAG,cAAcM,EAAS,8CAAgC,yCADlE,WAEA,4BAAQN,GAAG,QAAQC,QAASM,GAAa,2CA+C1BC,E,YA1Cf,WAAYC,GAAQ,IAAD,8BACnB,4CAAMA,KAUNF,YAAc,WACd,EAAKG,SAAS,CACdC,WAAY,EACZC,aAAc,GACdR,KAAM,QAfa,EAmBnBS,gBAAkB,SAACC,EAAKjB,GAAN,OAClB,EAAKa,SAAL,eACCb,EAAQ,EAAKkB,MAAMlB,IAASiB,EAAO,GAAM,MAnB1C,EAAKC,MAAQ,CACbJ,WAAY,EACZC,aAAc,GACdT,KAAM,UACNC,KAAM,KACNE,QAAQ,GAPW,E,sEA0BnB,OACA,yBAAKU,UAAU,OACf,kBAAC,EAAD,MAAU,6BACV,yBAAKhB,GAAG,WACR,kBAAC,EAAD,CAAUH,KAAK,QAAQC,MAAOmB,KAAKF,MAAMJ,WAAYZ,YAAakB,KAAKJ,kBACvE,kBAAC,EAAD,CAAUhB,KAAK,UAAUC,MAAOmB,KAAKF,MAAMH,aAAcb,YAAakB,KAAKJ,mBACrE,6BAAM,6BACZ,6BACA,kBAAC,EAAD,CAAOV,KAAMc,KAAKF,MAAMZ,KAAMC,KAAMc,IAAOD,KAAKF,MAAMX,MAAMe,OAAO,WACnE,kBAAC,EAAD,CAAUb,OAAQW,KAAKF,MAAMT,OAAQC,YAAaU,KAAKV,oB,GApCrCa,IAAMC,WClBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.899ecd3d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport moment from 'moment';\n\nconst Header = () => <h1>Pomodoro Clock</h1>;\n\nconst SetTimer = ({type, value, handleClick}) => (\n  <div>\n  <h2 id={`${type}-label`}>{(`${type}` === 'session') ? 'Session ' : 'Break '}Length</h2>\n<div id=\"setTimers-controls\">\n<button id={`${type}-decrement`} onClick={() => handleClick(false, `${type}Value`)}>&darr;</button>&nbsp;\n<div id={`${type}-length`}>{value}</div>&nbsp;\n<button id={`${type}-increment`} onClick={() => handleClick(true, `${type}Value`)}>&uarr;</button>\n</div>\n</div>);\n\nconst Timer = ({ mode, time }) => (\n<div>\n<h2 id=\"timer-label\">{mode === 'session' ? 'Session' : 'Break'}</h2>\n<p id=\"time-left\">{time}</p>\n</div>\n);\n\nconst Controls = ({ active, handleReset }) => (\n<div id=\"controls\">\n<button id=\"start_stop\">{active ? <span>&#10074;&#10074;</span> : <span>&#9658;</span>}</button>&nbsp;&nbsp;\n<button id=\"reset\" onClick={handleReset}><span>&#8634;</span></button>\n</div>\n);\n\nclass App extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nbreakValue: 5,\nsessionValue: 25,\nmode: 'session',\ntime: 25 * 60 * 1000,\nactive: false\n}\n}\n\nhandleReset = () => {\nthis.setState({\nbreakValue: 5,\nsessionValue: 25,\ntime: 25 * 60 * 1000\n})\n}\n\nhandleSetTimers = (inc, type) => (\nthis.setState({\n[type] : this.state[type] + (inc ?  +1 : -1)\n})\n);\n\nrender() {\nreturn (\n<div className=\"App\">\n<Header /><br />\n<div id=\"setting\">\n<SetTimer type=\"break\" value={this.state.breakValue} handleClick={this.handleSetTimers}/>\n<SetTimer type=\"session\" value={this.state.sessionValue} handleClick={this.handleSetTimers} />\n</div><br /><br />\n<div>\n<Timer mode={this.state.mode} time={moment(this.state.time).format('mm:ss')} />\n<Controls active={this.state.active} handleReset={this.handleReset} />\n</div>\n</div>\n);\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}